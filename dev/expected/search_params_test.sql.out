SET escape_string_warning=off;
SET
SELECT assert_eq(
  'text',
  _get_modifier('subject:Patient.organization:Organization.identifier:text'::text),
  '_get_modifier text');
       assert_eq       
-----------------------
 OK _get_modifier text
(1 row)

SELECT assert_eq(
  NULL,
  _get_modifier('subject:Patient.organization:Organization.identifier'::text),
  '_get_modifier null');
       assert_eq       
-----------------------
 OK _get_modifier null
(1 row)

SELECT assert_eq(
  'subject:Patient.organization:Organization.identifier',
  _get_key('subject:Patient.organization:Organization.identifier:text'::text),
  '_get_key text');
    assert_eq     
------------------
 OK _get_key text
(1 row)

SELECT assert_eq(
  'subject:Patient.organization:Organization.identifier',
  _get_key('subject:Patient.organization:Organization.identifier'::text),
  '_get_key null');
    assert_eq     
------------------
 OK _get_key null
(1 row)

SELECT * FROM _parse_param('param=num');
   key   | operator | value 
---------+----------+-------
 {param} | =        | {num}
(1 row)

SELECT * FROM _parse_param('param=num&param=num2');
   key   | operator | value  
---------+----------+--------
 {param} | =        | {num}
 {param} | =        | {num2}
(2 rows)

SELECT * FROM _parse_param('param=<num');
   key   | operator | value 
---------+----------+-------
 {param} | <        | {num}
(1 row)

SELECT * FROM _parse_param('param=<%3Dnum');
   key   | operator | value 
---------+----------+-------
 {param} | <=       | {num}
(1 row)

SELECT * FROM _parse_param('param=>num');
   key   | operator | value 
---------+----------+-------
 {param} | >        | {num}
(1 row)

SELECT * FROM _parse_param('param=>%3Dnum');
   key   | operator | value 
---------+----------+-------
 {param} | >=       | {num}
(1 row)

SELECT * FROM _parse_param('param:missing=true');
   key   | operator | value  
---------+----------+--------
 {param} | missing  | {true}
(1 row)

SELECT * FROM _parse_param('param:missing=false');
   key   | operator |  value  
---------+----------+---------
 {param} | missing  | {false}
(1 row)

SELECT * FROM _parse_param('param=date');
   key   | operator | value  
---------+----------+--------
 {param} | =        | {date}
(1 row)

SELECT * FROM _parse_param('param=<date');
   key   | operator | value  
---------+----------+--------
 {param} | <        | {date}
(1 row)

SELECT * FROM _parse_param('param=<%3Ddate');
   key   | operator | value  
---------+----------+--------
 {param} | <=       | {date}
(1 row)

SELECT * FROM _parse_param('param=>date');
   key   | operator | value  
---------+----------+--------
 {param} | >        | {date}
(1 row)

SELECT * FROM _parse_param('param=>%3Ddate');
   key   | operator | value  
---------+----------+--------
 {param} | >=       | {date}
(1 row)

SELECT * FROM _parse_param('param:missing=true');
   key   | operator | value  
---------+----------+--------
 {param} | missing  | {true}
(1 row)

SELECT * FROM _parse_param('param:missing=false');
   key   | operator |  value  
---------+----------+---------
 {param} | missing  | {false}
(1 row)

SELECT * FROM _parse_param('param=str');
   key   | operator | value 
---------+----------+-------
 {param} | =        | {str}
(1 row)

SELECT * FROM _parse_param('param:exact=str');
   key   | operator | value 
---------+----------+-------
 {param} | exact    | {str}
(1 row)

SELECT * FROM _parse_param('subject:Patient.name=ups');
          key           | operator | value 
------------------------+----------+-------
 {subject:Patient,name} | =        | {ups}
(1 row)

SELECT * FROM _parse_param('param=~quantity');
   key   | operator |   value    
---------+----------+------------
 {param} | ~        | {quantity}
(1 row)

/* ### Chained params ### */
/* [param].[rest]=[val] {"param":"param", "op": "chain" ,"value": "#{rest}=#{val}"} */
/* [param]:[type].[rest]=[val] {"param":"param", "op": "chain" ,"value": [type "#{rest}=#{val}"]} */
/* [param]:[type].[rest]:modifier=[val] {"param":"param", "op": "modifier" ,"value": [type "#{rest}=#{val}"]} */
/* ### Composite Search params ### */
/* [first]&[rest] {:key "op": "and" ,"value":ue [first, rest]} */
/* [param]=[val,rest] {:key "op": "ORDER BY" ,"value":ue []} */
/* [param]=key1$val1,key2$val2 {:kep param "op": "composite" ,"value": [key1 val1 key2 val2]} */
