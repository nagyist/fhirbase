SET escape_string_warning=off;
SET
BEGIN;
BEGIN
WITH previous AS (
    SELECT
      c.alert#>>'{entry,0,id}' AS update_id,
      _get_vid_from_url(c.alert#>>'{entry,0,link,0,href}') AS update_vid,
      c.device#>>'{entry,0,id}' AS delete_id
    FROM (
      SELECT
        fhir_create('{"base":"https://test.me"}', 'Alert', '{
  "resourceType": "Alert",
   "status": "active",
   "subject": {
     "reference": "Patient/example",
     "display": "Peter Patient"
   },
   "note": "previous-note"
}'::jsonb, '[{"scheme": "http://hl7.org/fhir/tag", "term": "sound", "label": "noise"}]'::jsonb) as alert,
        fhir_create('{"base":"https://test.me"}', 'Device', '{
  "resourceType": "Device",
  "type": {
    "coding": [
      {
        "system": "http://snomed.info/sct",
        "code": "86184003",
        "display": "Electrocardiographic monitor and recorder"
      }
    ],
    "text": "ECG"
  }
}'::jsonb, '[]'::jsonb) as device
    ) c
  ), bundle AS (
    SELECT
      p.*,
      replace(replace(replace('{
  "resourceType" : "Bundle",
  "entry" : [
    {
      "id" : "@create-device",
      "category" : [{
        "term" : "sound",
        "label" : "noise",
        "scheme" : "http://hl7.org/fhir/tag"
      }],
      "content" : {
        "resourceType": "Device",
        "type": {
          "coding": [
            {
              "system": "http://snomed.info/sct",
              "code": "86184003",
              "display": "Electrocardiographic monitor and recorder"
            }
          ],
          "text": "ECG"
        }
      }
    },
    {
      "id" : "@update-alert",
      "link" : [{
        "rel" : "self",
        "href" : "@update-vid-alert"
      }],
      "category" : [{
        "term" : "music",
        "label" : "silence",
        "scheme" : "http://hl7.org/fhir/tag"
      }],
      "content" : {
        "resourceType": "Alert",
        "status": "active",
        "subject": {
          "reference": "@create-device",
          "display": "Peter Patient"
        },
        "note": "current-note",
        "author": {
          "reference": "@delete-device",
          "display": "Nancy Nurse"
        }
      }
    },
    {
      "id" : "@delete-device",
      "deleted" : "2012-05-29T23:45:32+00:00"
    }
  ]
}', '@update-alert', p.update_id), '@delete-device', p.delete_id), '@update-vid-alert', p.update_vid) as bundle
    FROM previous p
  ), trans AS (
    SELECT
      b.update_id,
      b.delete_id,
      fhir_transaction('{"base":"https://test.me"}', b.bundle::jsonb) as bundle
    FROM bundle b
  ), expanded AS (
    SELECT
      t.update_id,
      t.delete_id,
      t.bundle,
      t.bundle#>>'{entry,0,id}' as created_id,
      t.bundle#>>'{entry,1,id}' as updated_id,
      t.bundle#>>'{entry,2,id}' as deleted_id
    FROM trans t
  ), testing AS (
    SELECT
      e.*,
      fhir_read('{"base":"https://test.me"}', 'Device', e.created_id::uuid) as created,
      fhir_read('{"base":"https://test.me"}', 'Alert', e.updated_id::uuid) as updated,
      fhir_read('{"base":"https://test.me"}', 'Device', e.deleted_id::uuid) as deleted
    FROM expanded e
  )
  SELECT
    assert_eq(
      t.update_id,
      t.updated_id,
      'update_id == updated_id'),
    assert_eq(
      t.delete_id,
      t.deleted_id,
      'delete_id & deleted_id'),
    assert_eq(
      '3',
      t.bundle->>'totalResults',
      'totalResults')
  FROM testing t
  UNION ALL
  SELECT
    assert_eq(
      'ECG',
      t.created#>>'{entry,0,content,type,text}',
      'created device'),
    assert_eq(
      'current-note',
      t.updated#>>'{entry,0,content,note}',
      'updated note'),
    assert_eq(
      NULL,
      t.deleted->>'entry',
      'updated device')
  FROM testing t
  UNION ALL
  SELECT
    assert_eq(
      t.created_id,
      t.updated#>>'{entry,0,content,subject,reference}',
      'update created reference'),
    assert_eq(
      t.deleted_id,
      t.updated#>>'{entry,0,content,author,reference}',
      'update deleted reference'),
    assert_eq(
      'noise',
      t.created#>>'{entry,0,category,0,label}',
      'created tag')
  FROM testing t
  UNION ALL
  SELECT
    assert_eq(
      '{noise,silence}',
      (SELECT array_agg(e.value->>'label' ORDER BY e.value->>'label')
        FROM jsonb_array_elements(t.updated#>'{entry,0,category}') e),
      'original and updated tags'),
    null,
    null
  FROM testing t;
          assert_eq           |          assert_eq          |     assert_eq     
------------------------------+-----------------------------+-------------------
 OK update_id == updated_id   | OK delete_id & deleted_id   | OK totalResults
 OK created device            | OK updated note             | OK updated device
 OK update created reference  | OK update deleted reference | OK created tag
 OK original and updated tags |                             | 
(4 rows)

ROLLBACK;
ROLLBACK
