SET escape_string_warning=off;
SET
BEGIN;
BEGIN
SELECT 'created' FROM fhir_create('{}'::jsonb, 'Patient', '550e8400-e29b-41d4-a716-446655440010'::uuid,  E'{
  "resourceType": "Patient",
  "text": {
    "status": "generated",
    "div": "<div>\\n      <p>\\n        <b>Generated Narrative</b>\\n      </p>\\n      <p>\\n        <b>identifier</b>: BSN = 123456789 (official), BSN = 123456789 (official)\\n      </p>\\n      <p>\\n        <b>name</b>: Roel(official)\\n      </p>\\n      <p>\\n        <b>telecom</b>: ph: +31612345678(mobile), ph: +31201234567(home)\\n      </p>\\n      <p>\\n        <b>gender</b>: \\n        <span title=\\"Codes: {http://snomed.info/sct 248153007}, {http://hl7.org/fhir/v3/AdministrativeGender M}\\">Male</span>\\n      </p>\\n      <p>\\n        <b>birthDate</b>: 13-Mar 1960\\n      </p>\\n      <p>\\n        <b>deceased[x]</b>: false\\n      </p>\\n      <p>\\n        <b>address</b>: Bos en Lommerplein 280 Amsterdam 1055RW NLD (home)\\n      </p>\\n      <p>\\n        <b>maritalStatus</b>: \\n        <span title=\\"Codes: {http://snomed.info/sct 36629006}, {http://hl7.org/fhir/v3/MaritalStatus M}\\">Legally married</span>\\n      </p>\\n      <p>\\n        <b>multipleBirth[x]</b>: false\\n      </p>\\n      <p>\\n        <b>photo</b>: \\n      </p>\\n      <h3>Contacts</h3>\\n      <table class=\\"grid\\">\\n        <tr>\\n          <td>\\n            <b>Relationship</b>\\n          </td>\\n          <td>\\n            <b>Name</b>\\n          </td>\\n          <td>\\n            <b>Telecom</b>\\n          </td>\\n          <td>\\n            <b>Address</b>\\n          </td>\\n          <td>\\n            <b>Gender</b>\\n          </td>\\n          <td>\\n            <b>Organization</b>\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>\\n            <span title=\\"Codes: {http://snomed.info/sct 127850001}, {http://hl7.org/fhir/patient-contact-relationship partner}\\">Wife</span>\\n          </td>\\n          <td>Ariadne Bor-Jansma</td>\\n          <td>ph: +31201234567(home)</td>\\n          <td> </td>\\n          <td> </td>\\n          <td> </td>\\n        </tr>\\n      </table>\\n      <p>\\n        <b>communication</b>: \\n        <span title=\\"Codes: {urn:std:iso:639-1 nl-NL}\\">Dutch</span>\\n      </p>\\n      <p>\\n        <b>managingOrganization</b>: AUMC\\n      </p>\\n      <p>\\n        <b>active</b>: true\\n      </p>\\n    </div>"
  },
  "identifier": [
    {
      "use": "official",
      "label": "MRN",
      "system": "MRN",
      "value": "7777777"
    },
    {
      "use": "official",
      "label": "BSN",
      "system": "urn:oid:2.16.840.1.113883.2.4.6.3",
      "value": "123456789"
    }
  ],
  "name": [
    {
      "use": "official",
      "text": "Roel",
      "family": [
        "Bor"
      ],
      "given": [
        "Roelof Olaf"
      ],
      "prefix": [
        "Drs."
      ],
      "suffix": [
        "PDEng."
      ]
    }
  ],
  "telecom": [
    {
      "system": "phone",
      "value": "+31612345678",
      "use": "mobile"
    },
    {
      "system": "phone",
      "value": "+31201234567",
      "use": "home"
    }
  ],
  "gender": {
    "coding": [
      {
        "system": "http://snomed.info/sct",
        "code": "248153007",
        "display": "Male"
      },
      {
        "system": "http://hl7.org/fhir/v3/AdministrativeGender",
        "code": "M",
        "display": "Male"
      }
    ]
  },
  "birthDate": "1960-03-13",
  "deceasedBoolean": false,
  "address": [
    {
      "use": "home",
      "line": [
        "Bos en Lommerplein 280"
      ],
      "city": "Amsterdam",
      "zip": "1055RW",
      "country": "NLD"
    }
  ],
  "maritalStatus": {
    "coding": [
      {
        "system": "http://snomed.info/sct",
        "code": "36629006",
        "display": "Legally married"
      },
      {
        "system": "http://hl7.org/fhir/v3/MaritalStatus",
        "code": "M"
      }
    ]
  },
  "multipleBirthBoolean": false,
  "photo": [
    {
      "contentType": "image/jpeg",
      "url": "binary/@f006"
    }
  ],
  "contact": [
    {
      "relationship": [
        {
          "coding": [
            {
              "system": "http://snomed.info/sct",
              "code": "127850001",
              "display": "Wife"
            },
            {
              "system": "http://hl7.org/fhir/patient-contact-relationship",
              "code": "partner"
            }
          ]
        }
      ],
      "name": {
        "use": "usual",
        "text": "Ariadne Bor-Jansma"
      },
      "telecom": [
        {
          "system": "phone",
          "value": "+31201234567",
          "use": "home"
        }
      ]
    }
  ],
  "communication": [
    {
      "coding": [
        {
          "system": "urn:std:iso:639-1",
          "code": "nl-NL",
          "display": "Dutch"
        }
      ]
    }
  ],
  "managingOrganization": {
    "reference": "Organization/%s",
    "display": "AUMC"
  },
  "active": true
}'::jsonb, '[{"scheme": "http://pt.com", "term": "http://pt/vip", "label":"pt"}]'::jsonb);
 ?column? 
----------
 created
(1 row)

SELECT 'created' FROM fhir_create('{}'::jsonb, 'Patient', '550e8400-e29b-41d4-a716-446655440011'::uuid,  E'{
  "resourceType": "Patient",
  "text": {
    "status": "generated",
    "div": "<div>\\n      <table>\\n        <tbody>\\n          <tr>\\n            <td>Name</td>\\n            <td>Peter James <b>Chalmers</b> (&quot;Jim&quot;)</td>\\n          </tr>\\n          <tr>\\n            <td>Address</td>\\n            <td>534 Erewhon, Pleasantville, Vic, 3999</td>\\n          </tr>\\n          <tr>\\n            <td>Contacts</td>\\n            <td>Home: unknown. Work: (03) 5555 6473</td>\\n          </tr>\\n          <tr>\\n            <td>Id</td>\\n            <td>MRN: 12345 (Acme Healthcare)</td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>"
  },
  "identifier": [
    {
      "use": "usual",
      "label": "MRN",
      "system": "urn:oid:1.2.36.146.595.217.0.1",
      "value": "12345",
      "period": {
        "start": "2001-05-06"
      },
      "assigner": {
        "display": "Acme Healthcare"
      }
    }
  ],
  "name": [
    {
      "use": "official",
      "family": [
        "Chalmers"
      ],
      "given": [
        "Peter",
        "James"
      ]
    },
    {
      "use": "usual",
      "given": [
        "Jim"
      ]
    }
  ],
  "gender": {
    "coding": [
      {
        "system": "http://hl7.org/fhir/v3/AdministrativeGender",
        "code": "M",
        "display": "Male"
      }
    ]
  },
  "birthDate": "1974-12-25",
  "deceasedBoolean": false,
  "address": [
    {
      "use": "home",
      "line": [
        "534 Erewhon St"
      ],
      "city": "PleasantVille",
      "state": "Vic",
      "zip": "3999"
    }
  ],
  "contact": [
    {
      "relationship": [
        {
          "coding": [
            {
              "system": "http://hl7.org/fhir/patient-contact-relationship",
              "code": "partner"
            }
          ]
        }
      ],
      "name": {
        "family": [
          "du",
          "Marché"
        ],
        "_family": [
          {
            "extension": [
              {
                "url": "http://hl7.org/fhir/Profile/iso-21090#qualifier",
                "valueCode": "VV"
              }
            ]
          },
          null
        ],
        "given": [
          "Bénédicte"
        ]
      },
      "telecom": [
        {
          "system": "phone",
          "value": "+33 (237) 998327"
        }
      ]
    }
  ],
  "managingOrganization": {
    "reference": "Organization/1"
  },
  "active": false
}'::jsonb, '[{"scheme": "http://pt.com", "term": "http://pt/noise", "label":"noise"}]'::jsonb);
 ?column? 
----------
 created
(1 row)

SELECT build_search_query('Patient', '_count=50&_page=3');
       build_search_query       
--------------------------------
 SELECT patient.* FROM patient +
                               +
 WHERE  true = true            +
 LIMIT 50
(1 row)

SELECT build_search_query('Patient','_count=50&_page=3&_sort=birthdate');
                          build_search_query                          
----------------------------------------------------------------------
 SELECT patient.* FROM patient                                       +
                                                                     +
 WHERE  true = true                                                  +
  ORDER BY (json_get_in(patient.content, '{birthDate}'))[1]::text ASC+
 LIMIT 50
(1 row)

SELECT build_search_query('Patient', '_count=1');
       build_search_query       
--------------------------------
 SELECT patient.* FROM patient +
                               +
 WHERE  true = true            +
 LIMIT 1
(1 row)

SELECT assert_eq('1',
(
    SELECT COUNT(*)::varchar
      FROM search('Patient', '_count=1')
), 'search respects _count option');
            assert_eq             
----------------------------------
 OK search respects _count option
(1 row)

SELECT assert_eq('550e8400-e29b-41d4-a716-446655440010',
(
  SELECT string_agg(logical_id::varchar, '|')
  FROM search('Patient', '_count=1&_page=0&_sort=birthdate')
), 'search next page respects _count and _page option');
                      assert_eq                       
------------------------------------------------------
 OK search next page respects _count and _page option
(1 row)

SELECT assert_eq('550e8400-e29b-41d4-a716-446655440011',
(
  SELECT string_agg(logical_id::varchar, '')
  FROM search('Patient', 'gender=M&_count=1&_page=0&_sort:desc=birthdate')
), 'search with gender respects _count and _page option');
                       assert_eq                        
--------------------------------------------------------
 OK search with gender respects _count and _page option
(1 row)

SELECT assert_eq(('550e8400-e29b-41d4-a716-446655440010' || '|' || '550e8400-e29b-41d4-a716-446655440011'),
(
  SELECT string_agg(logical_id::varchar, '|')
    FROM search('Patient', '_sort:desc=given')
), 'search respects _sort option');
            assert_eq            
---------------------------------
 OK search respects _sort option
(1 row)

SELECT build_search_query('Patient', 'gender=M&_sort:asc=given');
                                  build_search_query                                   
---------------------------------------------------------------------------------------
 SELECT patient.* FROM patient                                                        +
                                                                                      +
 WHERE index_codeableconcept_as_token(patient.content, '{gender}') && '{M}'::varchar[]+
  ORDER BY (json_get_in(patient.content, '{name,given}'))[1]::text ASC                +
 LIMIT 100
(1 row)

SELECT assert_eq(('550e8400-e29b-41d4-a716-446655440011' || '|' || '550e8400-e29b-41d4-a716-446655440010'),
(
  SELECT string_agg(logical_id::varchar, '|')
    FROM search('Patient', '_sort:asc=given')
), 'search respects _sort inverse option');
                assert_eq                
-----------------------------------------
 OK search respects _sort inverse option
(1 row)

/* SELECT  build_search_query('Patient', 'gender=M&_sort:desc=gender&_sort=birthdate'); */
/* SELECT assert_eq(:'pt_uuid', */
/* ( */
/*   SELECT string_agg(logical_id::varchar, '|') */
/*     FROM search('Patient', 'gender=M&_sort:desc=gender&_sort=birthdate&_count=1') */
/* ), 'search should combine several _sort columns'); */
ROLLBACK;
ROLLBACK
